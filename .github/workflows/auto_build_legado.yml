name: Legado Release Build

on:
  schedule:
    - cron: 0 6 * * *
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.event.head_commit.message, 'Merge pull request') }}
    outputs:
      version: ${{ steps.set-ver.outputs.version }}
      versionL: ${{ steps.set-ver.outputs.versionL }}
      sign: ${{ steps.check.outputs.sign }}
    steps:
      - id: set-ver
        run: |
          echo "version=$(date -d "8 hour" -u +3.%y.%m%d%H)" >> $GITHUB_OUTPUT
          echo "versionL=$(date -d "8 hour" -u +3.%y.%m%d%H%M)" >> $GITHUB_OUTPUT
      - id: check
        run: |
          if [ ! -z "${{ secrets.RELEASE_KEY_STORE }}" ]; then
            echo "sign=yes" >> $GITHUB_OUTPUT
          fi

  build:
    needs: prepare
    if: ${{ needs.prepare.outputs.sign }}
    strategy:
      matrix:
        product: [ app, google ]
        type: [ release, releaseA ]
        userName: [ gedoor ]
        repoName: [ legado ]
        branchName: [ master ]
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      product: ${{ matrix.product }}
      type: ${{ matrix.type }}
      VERSION: ${{ needs.prepare.outputs.version }}
      VERSIONL: ${{ needs.prepare.outputs.versionL }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Check New Commit
        run: |
          upStream=https://github.com/${{ matrix.userName }}/${{ matrix.repoName }}
          echo "upStream=$upStream" >> $GITHUB_ENV
          commit=$(curl -sL $upStream/commits/${{ matrix.branchName }} |grep -o '/${{ matrix.userName }}/${{ matrix.repoName }}/commit/[a-z0-9]\+' |head -1 | cut -d\/ -f5)
          if ! git log --oneline |grep -q "$commit"; then
            echo "commit=$commit" >> $GITHUB_ENV
            echo "commitS=${commit:0:7}" >> $GITHUB_ENV
          fi

      - name: Checkout Source Code and Zip
        if: ${{ env.commit }}
        run: |
          git clone ${{ env.upStream }} Apk_Build_${{ matrix.repoName }}
          cd Apk_Build_${{ matrix.repoName }}
          git checkout ${{ env.commit }}
          echo "tag=$(git log --date=format:'%Y%m%d-%H%M' --pretty=format:%cd ${{ env.commitS }} -1)" >> $GITHUB_ENV
      - name: Compress Source Code
        if: ${{ env.commit }}
        working-directory: Apk_Build_${{ matrix.repoName }}
        run: |
          zip -q -x ".git/*" -r source-${{ env.commitS }}.zip .

      - name: Clear 18PlusList.txt
        working-directory: Apk_Build_${{ matrix.repoName }}
        run: |
          echo "清空18PlusList.txt"
          echo "">app/src/main/assets/18PlusList.txt
      - name: Release Apk Sign
        if: ${{ env.commit }}
        working-directory: Apk_Build_${{ matrix.repoName }}
        run: |
          echo "给apk增加签名"
          cp -f ${{ github.workspace }}/.github/workflows/legado.jks app/legado.jks
          sed '$a\RELEASE_STORE_FILE=./legado.jks'          gradle.properties -i
          sed '$a\RELEASE_KEY_ALIAS=legado'                 gradle.properties -i
          sed '$a\RELEASE_STORE_PASSWORD=gedoor_legado'     gradle.properties -i
          sed '$a\RELEASE_KEY_PASSWORD=gedoor_legado'       gradle.properties -i

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build With Gradle
        if: ${{ env.commit }}
        working-directory: Apk_Build_${{ matrix.repoName }}
        run: |
          if [ ${{ env.type }} == 'release' ]; then
            typeName="原包名"
          else
            typeName="共存"
            sed "s/'.release'/'.releaseA'/" app/build.gradle  -i
            sed 's/.release/.releaseA/'     app/google-services.json -i
          fi
          echo "统一版本号"
          sed "/def version/c def version = \"${{ env.VERSION }}\"" app/build.gradle  -i
          echo "开始${{ env.product }}$typeName构建"
          chmod +x gradlew
          ./gradlew assemble${{ env.product }}release --build-cache --parallel --daemon --warning-mode all

      - name: Organize the Files
        if: ${{ env.commit }}
        working-directory: Apk_Build_${{ matrix.repoName }}
        run: |
          rm -rf apk/
          mkdir -p apk/
          for file in `ls app/build/outputs/apk/*/*/*.apk`; do
            echo "file name is $file"
            mv "$file" apk/legado_${{ env.product }}_${{ env.VERSIONL }}_$typeName.apk
          done
      - name: Upload App To Artifact
        uses: actions/upload-artifact@v3
        with:
          name: legado.${{ env.product }}.${{ env.type }}
          path: Apk_Build_${{ matrix.repoName }}/apk/*.apk

      - name: Release Note
        if: ${{ env.product == 'app' }}
        working-directory: Apk_Build_${{ matrix.repoName }}
        run: |
          lastCommit=$(grep "${{ matrix.userName }}\/${{ matrix.repoName }}" ${{ github.workspace }}/README.md |grep -o '[a-z0-9]\{40\}')
          export LESSCHARSET=utf-8
          echo -e "Credit: [${{ matrix.userName }}_${{ matrix.repoName }}](${{ env.upStream }})\nCommit: ${{ env.commit }}\nChangelog:" > apk/${{ matrix.userName }}-Release.log
          if [ "${{ env.commit }}" == "${lastCommit}" ]; then
            git log --pretty=format:%B ${{ env.commitS }} -1 |sed -e "s# \{2,\}#\n#g" -e "/^Merge \(pull\|branch\|remote\)/d" -e '/^$/d' |cat -n |sort -k2,2 -k1,1n |uniq -f1 |sort -k1,1n |cut -f2- >> apk/${{ matrix.userName }}-Release.log
          else
            git log --pretty=format:%B ${{ env.commitS }}...${lastCommit:0:7} |sed -e "s# \{2,\}#\n#g" -e "/^Merge \(pull\|branch\|remote\)/d" -e '/^$/d' |cat -n |sort -k2,2 -k1,1n |uniq -f1 |sort -k1,1n |cut -f2- >> apk/${{ matrix.userName }}-Release.log
          fi
      - name: Release and Upload Assets(release area)
        uses: softprops/action-gh-release@v1
        if: ${{ env.commit }}
        with:
          name: legado_app_${{ env.VERSION }}
          tag_name: legado_app_${{ env.VERSION }}
          body_path: Apk_Build_${{ matrix.repoName }}/apk/${{ matrix.userName }}-Release.log
          files: |
            Apk_Build_${{ matrix.repoName }}/apk/*
            Apk_Build_${{ matrix.repoName }}/source-${{ env.commitS }}.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Push to master
        if: ${{ env.commit }}
        run: |
          rm -rf Apk_Build_${{ matrix.repoName }}
          sed -i '/url =/d' ./.git/config
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote set-url --add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git pull --rebase
          sed -i "/${{ matrix.userName }}\/${{ matrix.repoName }}/s#Updated: [a-zA-Z0-9]*#Updated: ${{ env.commit }}#" README.md
          git add --all
          git commit -m "${{ matrix.repoName }}_${{ matrix.userName }}_${{ env.tag }}_${{ env.commit }}"
          git push -u -f origin main